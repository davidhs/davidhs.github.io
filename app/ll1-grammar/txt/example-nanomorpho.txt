Program -> _FunctionSeq

_FunctionSeq     -> Function _FunctionSeqCont
_FunctionSeqCont -> Function _FunctionSeqCont
_FunctionSeqCont -> #

Function -> name ( _OptNameSeq ) { _OptDeclSeq _ExprSemicolonSeq }

_OptNameSeq -> _NameSeq
_OptNameSeq -> #

_NameSeq     ->   name _NameSeqCont
_NameSeqCont -> , name _NameSeqCont
_NameSeqCont -> #

_OptDeclSeq -> _DeclSeq
_OptDeclSeq -> #

_DeclSeq     -> Decl ; _DeclSeqCont
_DeclSeqCont -> Decl ; _DeclSeqCont
_DeclSeqCont -> #

_ExprSemicolonSeq     -> Expr ; _ExprSemicolonSeqCont
_ExprSemicolonSeqCont -> Expr ; _ExprSemicolonSeqCont
_ExprSemicolonSeqCont -> #

Decl -> var _NameSeq

Expr -> name                _ExprName
Expr -> return               Expr
Expr -> opname               Expr
Expr -> literal             _OptExpr
Expr -> ( Expr )            _OptExpr
Expr -> Ifexpr              _OptExpr
Expr -> while ( Expr ) Body _OptExpr

_OptExpr -> opname Expr
_OptExpr -> #

_ExprName -> ( _OptExprCommaSeq ) _OptExpr
_ExprName -> =                     Expr
_ExprName -> _OptExpr

_OptExprCommaSeq -> _ExprCommaSeq
_OptExprCommaSeq -> #

_ExprCommaSeq     ->   Expr _ExprCommaSeqCont
_ExprCommaSeqCont -> , Expr _ExprCommaSeqCont
_ExprCommaSeqCont -> #

Ifexpr -> if ( Expr ) Body _IfexprCont

_IfexprCont -> elsif ( Expr ) Body _IfexprCont
_IfexprCont -> else Body
_IfexprCont -> #

Body -> { _ExprSemicolonSeq }
